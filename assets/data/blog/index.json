{"hash":"2444d141b30d78a3cbc00240cc093b1342d97959","data":{"metadata":{"siteName":"Ben Schattinger","siteDescription":"The website of Ben Schattinger"},"allPost":{"totalCount":2,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"757854843a4e697a7f6d7e276735e562","title":"HipScript","timeToRead":5,"description":"By chaining several compilers, you can run CUDA code in the browser!","content":"<p>By chaining <a href=\"https://github.com/CHIP-SPV/chipStar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chipStar</a> (a HIP and NVIDIA® CUDA® to OpenCL compiler), <a href=\"https://github.com/google/clspv/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Clspv</a> (an OpenCL to Vulkan compiler), and <a href=\"https://dawn.googlesource.com/dawn/+/refs/heads/main/src/tint/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tint</a> (among others, a Vulkan shader to WebGPU shader compiler), you can run CUDA code in the browser!</p>\n<p><a href=\"https://hipscript.lights0123.com/\" target=\"_blank\" rel=\"noopener\" class=\"xl:col-span-3 py-3 bg-gray-600 flex justify-center items-center text-white bg-gradient-cool font-bold text-3xl\">Try it out! ↗</a></p>\n<p><a href=\"https://github.com/lights0123/hipscript/\" target=\"_blank\" rel=\"noopener\" class=\"xl:col-span-3 py-3 flex justify-center items-center text-white bg-gray-800 font-bold text-3xl\">Source on GitHub ↗</a></p>\n<div class=\"light-only\">\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1555 404' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-59346f01fa87d36bcc950dc2e25ba123'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-59346f01fa87d36bcc950dc2e25ba123)' width='1555' height='404' xlink:href='data:image/svg%2bxml%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAARCAYAAABtu6qMAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHu0lEQVRYw41XiY6jSBL1/39Pf0BrpV5NH1Vll8sX5jDYGLABgzE35Fu9qEqP%2b9DspBSKJI/IOF5EJhMAg1JqIP%2bV4jgegiAYfN8fNoYxOI4znM/nIUmS4XQ6/XFPXddDnudDlmVD13W/zXPseDyKHMoIw3CIokiI/ce1fd%2bLrMvlMlRV9dMc5VO/NE2Fc39ZljJHblmWjI3jeLeFdhwOBxnn%2baQJPlrf9zidTgjDUOjl5QWz2Qxt0yLLMjiOI9%2bu68lay7KwWq1gGAau1yuapkGe5zL%2b%2bvoqPAgC1HWN2%2b2GNE1Fxo8fP2Qt99i2LeS6LsZxxPF4lH2Xy0X2HQ4HrNdrLBYLWVOWpehC3biuqirsdjv4vi86sc%2b9lDOfz7HdbpEkyYfe72fQNs5zPWVNlFIKgEqSRMVxzE/VdZ0qikK5nqvmb3O1XC3VfPGmNoahZq8zGTMtU/VDr4IwUMbWUGEUKmfnKP/oK9fdqSRNZP9%2b7ynLNmXO23vq%2beVZZVmmkjhRpmkKWZalrterOh6Pcm4URWq9XivHcdTpdJLx3W6nbNuW9eScb5pGHQ4H5bqu6vtexvb7vVoul2qxWKjZbCbfT09PyvM8sbOua5HJ/u12U5N3%2byGeYwTZ9FhTNUiiFGVeYrPc4st//kJxuSFPrkLocSfVAqoDxlZBtQpDM8o36b6OrBpwjmLxPlFBYpTIi6LAv23Ul4glgsgpg6hhoyxGmgjquk7GzuczPM/D8/OzIJSo4Zp7ChCShKpuwzCiKwacghiO6eG4D7FebrFZmfB2B/j7AFvDlrFzlKCpWlRFjbps0FYdmrJFdatlrCoa1Ld36psBfTnez6GzNRGiv46z0TimEw2l42gMHcDUiKLoQ99BiNB%2bbJQRxzE2m42kE53CvVr2hBu4kYJ4AL/7ocfYjuiqHgoKTd%2bg6Rq0HzxJU%2bxcF5bjwNm5MC0b9m6Hnedha1mYLxbYbLdwXFfWuZ6HIAxxOp%2bR366CFjrM9VyJAiPDHNU1iI54dAwV5jzrBw1hDZhOp1JTGDgiV%2bc851mbSDSYdYGOYtTZ5zwdqtuEBYGHcpKK0BEcu6QZyqjB1S9RhjWqc4Py1KAr%2bg9IxQjD6CdvEzUlC5PrYbVmcSwA9TN0Z/NXxEGCrukRnSKBKA3W0WOk27b9DfJ0DqNHeBMB1PlxHQviox0stEwJFk5yElOMxDHO8%2bwJIUWv0MP0tGXZotg5OiNapojXOVL7imSb47zKxCEaWnRCXTeoWdWLAvO3Bbamhf3Bh2U7mM3fBB08nAe2bYfX%2bRzWxkZ8iuF5rpzNfGREGTE6n0rqmkT%2b6dMnmKYpKco5OktqVNPIPING4pyGNh2lU0bL4ZjmRAHPnTA/CB16jYcTOnESS6G6%2bFfkXilGX5wCl13xnhYfhzDSxtbE22KJl%2bkrXmaveHqe4sfzC96WKyxWa6zWG2yMrTjEMExcsgwYgcV8KUozcixkb29vElEqxiuO0aRuRASDQ2WpHznXPj09yVpGU9cO6kUncT1TQteP5XIp1zXPoQyiRBfSCQ%2biUBIhxs1ULDxGaIteok%2b6uAViI5cipotOkqS/QZWIsJ2dIOFPUJ69vmI1XyO/vOcuz2fk6XgqRIP5zfxm3uo5ndMcJzFo3EtdaSTTgn1GnAaz2rPROXQSHaNTgchhk1uASnABjd/v96JUUVzR1h26W486blHHndwIddK9v8NYA%2bJYipp2BtsxCMVwImOxXONtsUKW5xKZvh%2bkRiyWS7lK27rF6Xy679fVm8axaOnKT%2bjTEbriE%2baM4OONxb6%2bSukAoooO0ZWfnJEnUaZOGa6/X4Pvhv99Dw/tKHf2tb4iv%2bXIrhmu5VU4K7%2b338O0ban2PoWHAdz9Xm4Dcu9wkBvA5/V1PiNOkvstMJQjurpHkiaiCJVlvpIYBHKdZgwMDSCnkzhOB3AfUUtYM1WINhpOeixy3EPbaOyf2kTnD5XQ18OoRozyDuiRnC44HiL4XgDTcGCbLuIohe%2bF2JkePPuA6lqjK3u0t%2b5vXvXo60FoaAa5VlX//kBqrt0/PnKosL73qbi%2b6miofgOw0QmfP3%2bWcc7rYkcnMJjacPYZ/cerVdPksWoSPo8vwXFUuKYFmluL%2bXQpj56%2b7lFkN3nU4OPdwl8p%2bZ0a30l/02DS2CmpHXTKUI/ou%2bGuIOFLYtRoKJV/fMQwkr%2bSdhCj/%2b3bN0GNrmPMf8KeRY%2bFnWjR7wttl%2baCAP0vwPd5mqbSH8dRtU0r72j%2bH1yyi5rOpurLf78ow9jIG9r3fZVeUtW0jaqbWqi4FfKmL8tSlVWpqqoSzu9h5E/nKDwIAnnv53ku/wHT6fS%2bT/8D8P0fhqH8o1Av/a/Cdzy/%2bR9APbbbrdI2kCiTuvEMPUY6n8/3dY/r7zWAqcAUoMdYiL5%2b/Yrv37/LHG8Gy7SkELEan6KTRI1e5npGgvP0PvOVESHnOKPCa4195jFfcV//%2bvpTfj/%2bERLORMFjlP5futxT9%2bEp/RhpytNP5t9qAIBWKT5O0er%2bOI7SL4qi9X2/tSyrNU2zdV233Ww2rWEY7eFwaKuquu/7N6TlZlkmch3HEdm73U76HIvj%2bCdd/om4ZhgG2ReGYbvf70WWbdsiz/O8NggCoa7r2l9tJf0Pj6cVP53dkE0AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1555\" alt=\"foo\" data-srcset=\"/assets/static/hipscript.82a2fbd.25bbe5d1d695cc44a24a0a4515000949.svg 480w, /assets/static/hipscript.cbab2cf.25bbe5d1d695cc44a24a0a4515000949.svg 1024w, /assets/static/hipscript.a72e906.25bbe5d1d695cc44a24a0a4515000949.svg 1555w\" data-sizes=\"(max-width: 1555px) 100vw, 1555px\" data-src=\"/assets/static/hipscript.a72e906.25bbe5d1d695cc44a24a0a4515000949.svg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/hipscript.a72e906.25bbe5d1d695cc44a24a0a4515000949.svg\" width=\"1555\" alt=\"foo\"></noscript></p>\n</div>\n<div class=\"dark-only\">\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1555 404' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b29a5aaa3afb700c1784b72fd5a80b0f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b29a5aaa3afb700c1784b72fd5a80b0f)' width='1555' height='404' xlink:href='data:image/svg%2bxml%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAARCAYAAABtu6qMAAAACXBIWXMAAAsTAAALEwEAmpwYAAAIzUlEQVRYw5VYWYwcZxHunWPn2rmvnumu6p57Zufc6WPn77F3ZhfjI74EcYwTx46NIjmyg7mCOYTCAzEQWZGAgCB2pMjE4CgGgWIH4kQYFCAKLyABQclDHnhEiDxECIkjavTPVtvtzSJCS%2bXp7vr7d9VXVV/Vv4IgCAIACJtdAJAFxCIAyIjYQsQKAOQQMQ0A%2bf/yTRAA4iT%2bTfQ%2bACgiYhYR84hYQESR7wcAhQ1rvQAQA4AkAIQ36BIAkEHEFCJmAEB01gBABABqtKeH3mXID6C1We7LTefJsJkRAFgAABMB9RrWAyqWEiDJ3HldQaVUx6YPUakjYhcRF1VUY2WsBFRU4whYR8AhglJXQJHKWA2WsLygoppWUKkiKqyMlSA5xo2sAkAJET3cQHqXIiC5tW0A6PE15BgHwwSAOgCEAIDbBQRWmfR8nyUAaJLjGuk86/7N9NzfhBsAHtVMSSkJMkh%2bFUvRIhTUvJzr56VsByrKQCrJLVHKDQsgDkQ5XxNEwZuTMwUR8s2snBbzcq6clTNSXs6VElIslZOzalZOY07O1nJyhutQlHNGUorFFVQy5ESDO42IMTIsShHqEDg8KBI5UKX1VQImQM6XCIA2gdYFgD45zp9HAKC6MjRP9wtuADhyMX7/65W/zN7d2TwSuqt1vHgfPBBfG%2b4drhh37DnWeDB1uH4ic6R5Mmuv2D57zfbZE9v/5lZ7/u9Te/71Lf%2bef2PrO/M3Rm8G/za1/f9atf32%2b2y/vc2elcNF86XwtLqjkJXTcQVVnr5pKqnUzKD3eJG9OQIjR5EOki5FkebO%2b26WM4BK2TMk4AruDTnyEef5/t5D3heWX4vfPT6l7Lbu6ey37qtstw4Y26wPajvGBxu7xoeqq6N9/Snbp%2b0ZHZY%2bbj4Svt88E3vQ/MLCp41z4U%2bZjy6cND8fPWU%2bHPuo%2bcXYQ8aXo5/Qz0a/MbwSvD5%2b/aajq%2bWdgizLAiJymXPZ4w4Od65I2ZAgZ5JUGiKt8ZD4NgDlOL9IGcIvDvwtUkJEL6Vdrq40fUJQ8FwfvxH4tv6jdeJhgl8Yz8TH79vMzPaZVRuwcbPPxo0BGy/2Z/dWdcDG7QHbYvbZuNtnVr3HrFrPYtWONZJ7jBUK22qxv67YgZPdz4Xzck5FVAoUGfUWB8EcN5AbL0mSE22e5owcMTgfUfSjRLgDqvlFKp8OOVymchjSPden3QhJnIlJqSioiEUoSMOSmbo8ell%2b0nhevWTckL9r/Ey8ZNwoXDFeifPvDLZa0Nmq7EZ7he32mGwtorNpTWfTJYOtxu2OfVvqVpoN/UDjqPTJ3iOBnJzNl7Dsl2V5zokeRXp%2bk5TPU0qnKKIFd5chQnT8UIkfeL2H6Zc/LxBgYXr2Oe2kRQgnEbCWl3N5vczEx/Ur2pPmjwfnjaut88bV7nnj6vAJ47kZmewaHRI0NhU1NglpbBLU2CSusYmpsUlHY5OyxiaLGpuMNDZp8zVLy1uC23YcDFQXW7pVnrSNsiUWZFFFwEVKS50iJpGRSYos/72TEyYiRkjntLYA6UWSaKfTEVw8wNtsnCRJLTNJnMNFduqrSahJCNjJSum0VZmIZ5fOK0%2bZ16sXjGvqBeNaY12ej9y1fGL2n2hsUtfYpKexiaGxyZhkhUTXrKmmsclQY5M%2bB0Rn056xc3vGvsf2LKrdJQ60gmqIWh9P03kyrEbRdGq/RCBJ9MvTfZn0YQeQfr/vzAB8/ZKLP3rkY5X2qDhEKrj6Ir8QAUvrGTCSL5ovxp4wnmuR1M8bV3vnzKcD/OPJaK9XY5PcxlSljGhSJgQ26kuNqj4qrwyn1R3JtJSM4frM0abWlSQD29Tfh3TvrukKOdIk2/MEWo6yIEF7LbvIMUzAhJxyIJ3I/%2bHpEab6QgXVWEKKLZxonwldWr4RvaL/Kvd9/dX8T/Tfx67or%2bTsge3lH5tsTeQ8QLXvJV5AnU27OpvWdTbVdDY1DLaaunf0EYGZ7/ceuOOkt9ZpDx5onUl9uP2xUF7OzgDkQxAnYjKqShFLU/QbNNT0nTSnOl9w1X%2bE1vMUTyBiaAPz8ymWcx2fBIuuyTPlJpm4e9Nn2C/nn9Z/Gha2COGYlY1lmBwXLN%2bCyloJzvw9xip9Zi32mdXrWkzpshHM3lkW11V7jJVnHYAx7FqjQoeNcgM2FsVt1dir7M%2bRLw0vhJJSjE%2bHIh%2bLKYIO0eVdLRCJo5CDpKqqQACIlLVVGonnueMkEUQMIKKfOlz8NubfwK5zrkFhfVFKEE73H/ZcNl6O3Ts%2bLe22Dpf3WkdqO60P9XdZh7p3j0/JH7CO1/aMDnf2j462PmM%2blvim/oPIY8al6Nf0ZyJf1S8vfF1/NnJJvxF6Sn8h9D3t58EXtT/O/0Z7y/fs4BfBC%2ba1%2bP8YcuJO3yfiihGRZZwZwElhANhOdR5zkWbY1R5TdM/L3Jk3bs0ZG0bh9RZXtmbvzhnf8RxvnE5/tng2sqrvtdb0fdpXUo8HDlaPJY6VTkXsoT0D762p7f3Tmu2199se%2b5DteWe77X17u%2b39w%2bo/fK%2bt/tP/2%2bnb/oujl4LfMn8Yvrrld6Gji6d8GTm1oKAap9YUIeFOhDYMMYFNxAGIR39MWeLwWJf4okXEXnbmC2f4ue3w5wIg4dREEQpzKpbmJZAwJScySTmekFVZl1CaFkBsxWEhIkJezkImGQDvfKjoD3Dh3JGSEtFoMRzmEi4GQpF1CQthYX3KmxPmilAsIioi4Mxhfh7QKcphF9FJFOEMRTFN0c/T8zyB1nA7RODwq/iuk%2b0tXzcFwEOLKojI29BWANwyIylQyiBDAwEHCNhDUAoKqlHew/kRma9HRK7v8zaKgLy/t2cnQ1R4Z2kgKjUFFQUR%2bSlzRQaJDz8KOcxBKMuy7CUuiDil%2bR7PBFnHhw06D6V72Jn73SP2u0BwLZhznQ/oiIp1ACxRajUJ5ZDwf1yufRO0r3PCK1HU%2bbuMs15RlJsGbyauwMmuw0%2bZ9qoQwAUqF99mf/v4D3%2bgO6v6e2S/AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1555\" alt=\"foo\" data-srcset=\"/assets/static/hipscript.dark.82a2fbd.4b8b9933739c7717f269ee90e2eb2fff.svg 480w, /assets/static/hipscript.dark.cbab2cf.4b8b9933739c7717f269ee90e2eb2fff.svg 1024w, /assets/static/hipscript.dark.a72e906.4b8b9933739c7717f269ee90e2eb2fff.svg 1555w\" data-sizes=\"(max-width: 1555px) 100vw, 1555px\" data-src=\"/assets/static/hipscript.dark.a72e906.4b8b9933739c7717f269ee90e2eb2fff.svg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/hipscript.dark.a72e906.4b8b9933739c7717f269ee90e2eb2fff.svg\" width=\"1555\" alt=\"foo\"></noscript></p>\n</div>\n<h1 id=\"what-is-hip-cuda\"><a href=\"#what-is-hip-cuda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is HIP? CUDA?</h1>\n<p>CUDA is the name of the API developed by NVIDIA for GPGPU (General-purpose computing on graphics processing units). A CUDA compiler compiles the same C++ file twice: once for the GPU architecture, and once for the host. This way, you can share code between them, and all data types remain the same. CUDA also provides library functions for interacting with the GPU and special syntax for launching CUDA kernels.</p>\n<p>CUDA kernels are written for one thread, but are then executed by many. Several threads (of the programmer's choice) form a \"block\", which can share access to fast on-chip memory. There are then some number of blocks in a \"grid\".</p>\n<p>AMD came along and created HIP, their competitor to CUDA. It has identical syntax and concepts to CUDA—just pretty much does <code class=\"language-text\">sed s/cuda/hip/g</code>! This allows projects like chipStar, which allows HIP code to run on any OpenCL-supported device, to provide a header file that <code class=\"language-text\">#define</code>s CUDA calls into HIP ones.</p>\n<h1 id=\"supported-hipcuda-features\"><a href=\"#supported-hipcuda-features\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Supported HIP/CUDA features</h1>\n<p>This project currently supports a <strong>very basic</strong> subset of HIP and CUDA. However, the supported subset already provides a fair bit of material for learning GPU programming:</p>\n<ul>\n<li>\n<p>Basic kernel launch syntax</p>\n<ul>\n<li>C++ is fully supported, so use generic kernels as you please! The compiler will analyze calls from the CPU side to determine what functions must be generated.</li>\n</ul>\n</li>\n<li>Static and dynamic shared memory</li>\n<li><code class=\"language-text\">__syncthreads</code> (as long as it's in a uniform control flow path, i.e. no early returns or if statements based on <code class=\"language-text\">threadIdx</code>)</li>\n<li><code class=\"language-text\">printf</code> (format string and values are written to a hidden buffer by the GPU, then formatted by the CPU afterwards)</li>\n<li><code class=\"language-text\">assert</code> (although Tint doesn't allow <code class=\"language-text\">__syncthreads</code> afterwards due to <a href=\"https://github.com/gpuweb/gpuweb/issues/3479#issuecomment-1467271026\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">an overzealous control-flow checker</a>)</li>\n<li>\n<p><code class=\"language-text\">hipMalloc</code>, <code class=\"language-text\">hipFree</code>, <code class=\"language-text\">hipMemcpy</code>, <code class=\"language-text\">hipGetSymbolAddress</code>, <code class=\"language-text\">hipMemcpyToSymbol</code>, <code class=\"language-text\">hipLaunchKernel</code>, <code class=\"language-text\">hipLaunchKernelGGL</code>, <code class=\"language-text\">hipGetLastError</code>, <code class=\"language-text\">hipPeekAtLastError</code>, <code class=\"language-text\">hipGetErrorName</code>, <code class=\"language-text\">hipGetErrorString</code></p>\n<ul>\n<li>and corresponding CUDA functions</li>\n</ul>\n</li>\n<li><code class=\"language-text\">__device__</code> and <code class=\"language-text\">__constant__</code> variables (although the latter are treated the same as the former, i.e. read-write)</li>\n</ul>\n<h2 id=\"unsupported-features\"><a href=\"#unsupported-features\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unsupported Features</h2>\n<ul>\n<li>\n<p>any functions not listed above</p>\n<ul>\n<li>streams</li>\n<li>graphs</li>\n<li>managed/asynchronous memory transfers</li>\n</ul>\n</li>\n<li>64-bit floating point (WebGPU limitation) and 16-bit floating point (Tint limitation) numbers</li>\n<li>integers other than 32-bit signed and unsigned integers (WebGPU limitation)</li>\n<li>\n<p>many things with pointers:</p>\n<ul>\n<li>passing a pointer to a kernel not directly as a parameter (e.g. in a struct)</li>\n<li>\n<p><strong>pointer manipulation on the CPU side</strong>: note this means that you cannot pass an offset to <code class=\"language-text\">hipMemcpy</code> or a kernel</p>\n<ul>\n<li>WebGPU would allow a 128-byte aligned offset passed to a kernel. However, I decided not to implement that because of the limited 32-bit address space of WASM.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>warp intrinsics (should be possible, although currently requires experimental Chrome flags)</li>\n<li>dynamic parallelism (could be polyfilled by converting calls to writes in a buffer, then launching kernels from the CPU)</li>\n<li>any GPU libraries: cuDNN, cuBLAS, cuRAND, ...</li>\n<li>Cooperative Groups</li>\n<li>Inline PTX (<a href=\"https://github.com/CHIP-SPV/chipStar/discussions/904#discussioncomment-10255598\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">although it has been done before</a>)</li>\n</ul>\n<h1 id=\"how-its-built\"><a href=\"#how-its-built\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How it's built</h1>\n<p>Using LLVM compiled to WebAssembly, the input source code is first passed through Clang, which already understands HIP and CUDA. These languages are compiled in two passes—for the GPU using SPIR-V and for the CPU using WebAssembly. These use WebAssembly headers, meaning all types are the same size. Then, the GPU side code is fed through chipStar, a HIP-to-OpenCL translator. I keep its output as LLVM bitcode to immediately pass through Clspv, converting it to a Vulkan shader. Finally, Google's Tint from the Dawn project translates it to WGSL. A WebAssembly implementation of the HIP API then coordinates kernel launches.</p>\n<p>I aimed to keep file size in mind. To package as large of a project LLVM is, I wanted to make sure I wasn't duplicating any code—for example, the WASM backend code shouldn't exist separately in the compiler and linker. This is traditionally done with dynamic linking, which isn't supported by Wasmer (it is by Emscripten, but by going through a JS intermediate: slow). Thankfully, LLVM has an option just for this case: <code class=\"language-text\">LLVM_TOOL_LLVM_DRIVER_BUILD</code>. By setting this flag, LLVM creates a single entrypoint that statically links to every executable. This way, you can just pass the desired tool as arg0 or arg1, like <code class=\"language-text\">llvm clang++ file.cpp</code>.</p>\n<p>I then bundled the chipStar LLVM passes in the LLVM source code. I added a command-line flag that allows Clang to run the passes. Typically they're run with <code class=\"language-text\">opt</code>, but that isn't compatible with the driver. Clspv and SPIRV-Tools were added as <code class=\"language-text\">LLVM_EXTERNAL_PROJECTS</code> to be additionally integrated in the single tool.</p>\n<h1 id=\"issues-i-encountered\"><a href=\"#issues-i-encountered\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Issues I encountered</h1>\n<h2 id=\"wasmer-runtime-workarounds\"><a href=\"#wasmer-runtime-workarounds\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wasmer Runtime Workarounds</h2>\n<p>I compiled LLVM using the WASIX toolchain, because it offers much needed functions not available in vanilla WASI, and Emscripten doesn't feel great for porting traditional command-line applications. However, the Wasmer SDK is the only implementation of the WASIX specification, and the JS version has some bugs. <a href=\"https://github.com/wasmerio/wasmer-js/issues/407\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">You can't load a WASM file directly</a>, loading their \"webc\" container directly just failed with a generic <code class=\"language-text\">Unreachable</code> error, and the recommended Wasmer CDN doesn't compress files—even when a 5x compression ratio is possible. This large file size then causes Chrome to not cache anything at all! So, I set the \"API endpoint\" of the CDN to a simple <code class=\"language-text\">file:</code> URI that points to a <code class=\"language-text\">blob:</code> URI for the actual WASM file. On the page load, I handle downloading and caching the binary manually.</p>\n<p>Then, I was running into issues where I'd get another generic <code class=\"language-text\">Unreachable</code> after launching more than a couple programs. I worked around this by just spawning new Web Workers and completely re-loading the SDK in each. Very thankfully, it seems like Chrome caches <code class=\"language-text\">WebAssembly.compile</code> calls with the same binary input so there isn't too much of a performance penalty.</p>\n<p>I couldn't debug these issues because <a href=\"https://github.com/wasmerio/wasmer-js/issues/437\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Wasmer SDK source is currently unable to be built</a> and the package on NPM doesn't ship with debug symbols.</p>\n<h2 id=\"compressed-data-on-cloudflare-r2\"><a href=\"#compressed-data-on-cloudflare-r2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compressed Data on Cloudflare R2</h2>\n<p>GZip compression brought by LLVM bundle from 75MB to 21MB, and Brotli further to 15MB. I decided to use Brotli because of these savings, and it's supported on all modern browsers. I decided to use Cloudflare R2 as my storage provider, on which <a href=\"https://alexi.sh/blog/2023/03/using-r2-to-store-and-serve-compressed-content/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">others have had success uploading pre-compressed data to</a> since it won't compress to Brotli for you. However, I was encountering issues with the upload step, since rclone was detecting an incorrectly-sized upload. Turns out, you need to specify <code class=\"language-text\">Cache-Control: no-transform</code>. That has the bonus of correctly supporting custom domains with R2 (strongly encouraged for production), since it tells Cloudflare not to uncompress the data, bypassing the entire purpose of doing this.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">rclone copyto --progress --header-upload \"Content-Type: application/octet-stream\" --header-upload \"Content-Encoding: br\" --header-upload \"Cache-Control: no-transform\" $file $connection:$bucket/$serverpath</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Before I discovered that, I used gdb to set a breakpoint on <code class=\"language-text\">github.com/rclone/rclone/fs/operations.(*copy).removeFailedCopy</code> to stop deleting the (sucessfully, but it didn't know that) uploaded file.</p>\n","date":"Jan 7 2025","path":"/blog/2025/01/07/hip-script/"}},{"node":{"id":"caf8895145ca16de642054d5f0303821","title":"Async/Await for AVR with Rust","timeToRead":16,"description":"With the recent ability for Rust to target AVR, it's time for me to bring my favorite feature of Rust to Arduino: async/await. Asynchronous code allows for doing (seemingly) multiple things at once, without the memory or CPU overhead of threads.","content":"<p>With the recent ability for Rust to compile for AVR microcontrollers, I thought that it's time for\nme to bring my favorite feature of Rust to Arduino: async/await.</p>\n<blockquote>\n<p><strong>TL;DR:</strong> final code is at <a href=\"https://github.com/lights0123/async-avr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lights0123/async-avr</a>. <a href=\"https://github.com/lights0123/async-avr/blob/main/examples/serial.rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here's an example of a\nsimple task that does two things at once</a>.</p>\n</blockquote>\n<h1 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h1>\n<p>The <a href=\"https://www.arduino.cc/en/Tutorial/BlinkWithoutDelay\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">age-old</a> <a href=\"https://arduino.stackexchange.com/questions/49300/blink-without-delay-for-5-times-every-20-seconds\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">question</a> <a href=\"https://arduino.stackexchange.com/questions/44497/how-to-flash-blink-i2c-lcd-backlight-without-delay-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">when</a> <a href=\"https://arduino.stackexchange.com/questions/35436/arduino-blink-two-leds-without-delayamount-of-repetitions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">learning</a> <a href=\"https://arduino.stackexchange.com/questions/37032/how-to-blink-2-led-strips-without-delay\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Arduino</a>:\n<em>\"<a href=\"https://arduino.stackexchange.com/questions/73164/blink-not-working\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How can I do</a> <a href=\"https://arduino.stackexchange.com/questions/49950/how-to-replace-the-delay-function-in-my-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">multiple things at once</a>\"</em>? When programming for full operating\nsystems, like any desktop, mobile, or higher-end embedded platforms, the answer is easy—threads.\nThey're built into the OS, and you typically <em>have</em> to use them to take advantage of features like\nmultiple CPU cores. Or, when programming for an embedded target, you may reach for a lightweight\n<abbr title=\"Real-Time Operating System\">RTOS</abbr> like <a href=\"https://freertos.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FreeRTOS</a>, which gives you full threads without much work.</p>\n<p>But what if you have a 16MHz microcontroller with 2 KB of RAM?</p>\n<p>The Arduino Uno is known for being ubiquitous, cheap, and easy to program. Although there are more\nand more reasons to use competing products, such as the various ARM Cortex-M and Espressif boards\n(which I use almost exclusively), the Microchip (formerly Atmel) ATMega series is sometimes still\npreferred for low power applications, cutting cents off a <abbr title=\"Bill of Materials\">BOM</abbr>, and its widespread support.</p>\n<p>Typically, one checks in a loop repeatedly to see if the task is ready to activate. This can be\nchecking if there's data in a serial buffer, if a certain time period has passed, or a <abbr title=\"General-Purpose Input/Output\">GPIO</abbr> pin has\ntoggled. However, I'm going to present an alternative to doing this—<code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>.</p>\n<h1 id=\"what-even-is-asyncawait-anyways\"><a href=\"#what-even-is-asyncawait-anyways\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What even is <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>, anyways?</h1>\n<p>Many modern languages are implementing <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>. C# was one of the first big languages to do\nit, and then Python, JavaScript, Dart, Kotlin quickly followed. The big difference between threads\nand <code class=\"language-text\">async</code> functions is that <code class=\"language-text\">async</code>hronous code is handled by the program itself, usually\ncooperatively, while synchronous operations on threads rely on the OS to do it. The first obvious\nreason for it, then, is when threads aren't available—just like what we're about to get into soon.\nHowever, asynchronous code is typically faster than synchronous code because it is able to avoid the\noverhead of spawning threads and context switches, as well as the memory overhead, as the amount of\nspace needed on the stack can be calculated ahead of time.</p>\n<p>Internally, the compiler turns the code into a state machine, typically using the language's\ngenerators feature if it has one. Here, every time you write <code class=\"language-text\">.await</code> and the data is not available\nimmediately, the compiler inserts a <code class=\"language-text\">return</code> statement, and adds a parameter that allows you to jump\nright back to where it was. Rust uses <code class=\"language-text\">Pin</code>ning, where it is guaranteed that the generated struct\nthat holds the stack will always be in the same place in memory at all times. This avoids a problem\nwhere a pointer is taken to a local variable, the function returns and comes back, and is suddenly\npointing to something completely different.</p>\n<h1 id=\"prior-work\"><a href=\"#prior-work\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prior work</h1>\n<p>C++20 has similar features to Rust's <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> with the <code class=\"language-text\">co_await</code> keyword, although the\n<a href=\"https://blog.panicsoftware.com/co_awaiting-coroutines/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">available documentation</a> is <a href=\"https://rust-lang.github.io/async-book/02_execution/04_executor.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">not quite as good as Rust's</a>.\nHowever, there's a total of... <a href=\"https://www.arduino.cc/search?q=%22co_await%22&#x26;tab=forum\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1 search result</a> on the Arduino forums, <em>and</em> it's\nin German with no code. And even if there <em>was</em> code, it would be largely unaccessable as Arduino\nships with an old compiler:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">❱ ~/.arduino15/packages/arduino/tools/avr-gcc/*/bin/avr-gcc --version\navr-gcc <span class=\"token punctuation\">(</span>GCC<span class=\"token punctuation\">)</span> <span class=\"token number\">7.3</span>.0\nCopyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2017</span> Free Software Foundation, Inc.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>GCC 7.3.0 ships with <a href=\"https://gcc.gnu.org/projects/cxx-status.html#cxx17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"almost full support\"</a> for C++17 (although not by default), but a\ntotal of 0 C++20 additions. And if you're on PlatformIO, you'll have even less luck:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">❱ ~/.platformio/packages/toolchain-atmelavr/bin/avr-gcc --version\navr-gcc <span class=\"token punctuation\">(</span>AVR_8_bit_GNU_Toolchain_3.6.2_1759<span class=\"token punctuation\">)</span> <span class=\"token number\">5.4</span>.0\nCopyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2015</span> Free Software Foundation, Inc.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>However, Rust has been able to compile <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> code for <a href=\"https://blog.rust-lang.org/2019/11/07/Async-await-stable.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">almost a year now on the <em>stable\ncompiler build</em></a>. There's been steadily increasing interest in using these\nfeatures on embedded platforms with Rust, and many projects have been using it as a result.</p>\n<h2 id=\"pseudo-asyncawait\"><a href=\"#pseudo-asyncawait\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pseudo-<code class=\"language-text\">async</code>/<code class=\"language-text\">await</code></h2>\n<p>These libraries actually implement a <em>very</em> similar thing to <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> with a state machine,\nand jumping to different positions in code based on where it's already been. For example,\n<a href=\"https://github.com/bxparks/AceRoutine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AceRoutine</a> has a macro, <code class=\"language-text\">COROUTINE</code>, that internally converts the function into a state machine\nthat jumps to different places using <code class=\"language-text\">goto</code>. This is actually almost identical to how tools like\nBabel in the JavaScript world convert <code class=\"language-text\">async</code> functions to traditional functions that can be used\nwith old browsers.</p>\n<p>However, there are a few very critical problems:</p>\n<ul>\n<li><strong>Local variables are not preserved across yields</strong>.</li>\n<li>You can't use certain statements in some libraries (not AceRoutine), such as <code class=\"language-text\">switch</code>.</li>\n<li>Destructors don't run properly, and will <strong><code class=\"language-text\">free</code> uninitialized memory</strong> if not done correctly\n(due to the first point).</li>\n<li>Tasks can't return values.</li>\n</ul>\n<p>These limitations are because simple preprocessor macros, which is the only option in C/C++, are\nonly \"glorified copy-paste\", and have no real computing power. Although <code class=\"language-text\">async</code> is built into the\nRust compiler, it wasn't before, and a (less-than-ideal, but still usable) macro could implement\nmost of the feature itself. Hopefully, new C++20 features will lead to more use in the embedded\nworld.</p>\n<h1 id=\"putting-it-together\"><a href=\"#putting-it-together\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Putting it together</h1>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting started</h2>\n<p>It looks like there's a few packages (known as \"crates\" in the Rust world) to interface with the\nhardware:</p>\n<ul>\n<li><a href=\"https://github.com/avr-rust/ruduino\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ruduino</a>, which only supports the Arduino Uno</li>\n<li><a href=\"https://github.com/Rahix/avr-device\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">avr-device</a>, which provides low-level hardware control</li>\n<li><a href=\"https://github.com/Rahix/avr-hal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">avr-hal</a>, which provides higher-level board and <abbr title=\"Microcontroller\">MCU</abbr> support, and depends on avr-device</li>\n</ul>\n<p>Although <a href=\"https://github.com/avr-rust/ruduino\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ruduino</a> is by the avr-rust team that worked on getting Rust working on AVR, I ultimately\ndecided to go with <a href=\"https://github.com/Rahix/avr-hal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">avr-hal</a>:</p>\n<ul>\n<li>It supports many more boards, and has a structure that allows it to expand further</li>\n<li>\n<p>It supports <a href=\"https://docs.rs/embedded-hal/0.2.*/embedded_hal/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">embedded-hal</a>, which allows us to share code between boards: for example, the\n<a href=\"https://docs.rs/apa102-spi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">apa102_spi</code></a> crate will let us control APA102 LED strips on an Arduino Uno and a Raspberry Pi\nrunning Linux, using the exact same code!</p>\n<ul>\n<li>embedded-hal also has a bigger focus on nonblocking operations, which is exactly what we're\nlooking for</li>\n</ul>\n</li>\n<li>It has a cleaner and safer API</li>\n</ul>\n<p>To set that up:</p>\n<p><strong>(Update 2020-07-26)</strong>: this is much simpler now with the latest nightly. All that is required:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">rustup <span class=\"token function\">install</span> nightly\nrustup +nightly component <span class=\"token function\">add</span> rust-src</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2 id=\"compiling-and-running\"><a href=\"#compiling-and-running\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiling and Running</h2>\n<p>We can compile by running</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">cargo +nightly build -Z build-std<span class=\"token operator\">=</span>core --release --target avr-atmega328p.json\n<span class=\"token comment\"># or, in my repository which has some helpers configured</span>\ncargo +nightly build --release</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Then, to upload it to a device, assuming that you have <code class=\"language-text\">avrdude</code> installed, run:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">avrdude -v -patmega328p -carduino -P/dev/ttyACM0 -b115200 -D -Uflash:w:target/avr-atmega328p/release/examples/serial.elf:e</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Change the upload path (<code class=\"language-text\">target/avr-atmega328p/release/examples/serial.elf</code>) to meet what you want\nto upload.</p>\n<h2 id=\"if-you-only-have-the-arduino-ide-installed\"><a href=\"#if-you-only-have-the-arduino-ide-installed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If you only have the Arduino IDE installed</h2>\n<p>Enable \"Show verbose output during: upload\" in the Arduino IDE. Observe the build logs for an\n<code class=\"language-text\">avrdude</code> command—it should look something like:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">/path/to/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17/bin/avrdude -C/path/to/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17/etc/avrdude.conf -v -patmega328p -carduino -P/dev/ttyACM0 -b115200 -D -Uflash:w:/tmp/arduino_build_721874/Blink.ino.hex:i</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Copy that command, but delete everything after <code class=\"language-text\">-Uflash:w:</code>. Then, without spaces, add the path to\nyour binary. This will typically be <code class=\"language-text\">target/avr-atmega328p/release/project_name.elf</code>, or\n<code class=\"language-text\">target/avr-atmega328p/release/examples/example_name.elf</code>. Finally, add <code class=\"language-text\">:e</code>. Your final command\nwill probably look something like:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">/path/to/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17/bin/avrdude -C/path/to/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino17/etc/avrdude.conf -v -patmega328p -carduino -P/dev/ttyACM0 -b115200 -D -Uflash:w:target/avr-atmega328p/release/project_name.elf:e</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<blockquote>\n<h3 id=\"what-about-converting-to-hex-first\"><a href=\"#what-about-converting-to-hex-first\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What about converting to hex first?</h3>\n<p>Arduino typically converts the compiled binary to raw hex, and many AVR-Rust projects have\n<a href=\"https://github.com/Rahix/avr-hal/blob/bfc5dfe67107a68b4a673e54532354af126cb3ba/mkhex.sh#L32\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">followed that pattern</a>. However, there's generally no need to do that, as <code class=\"language-text\">avrdude</code>\nhas the ability to upload ELF binaries directly.</p>\n</blockquote>\n<h2 id=\"onto-async-operations\"><a href=\"#onto-async-operations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Onto <code class=\"language-text\">async</code> operations</h2>\n<p>As I mentioned earlier, <a href=\"https://docs.rs/embedded-hal/0.2.*/embedded_hal/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">embedded-hal</a> is implemented in such a way that asynchronous operations is\nquite easy. When you attempt to read or write a value, you can get three results:</p>\n<ul>\n<li><code class=\"language-text\">WouldBlock</code>: I can't complete this operation right now.</li>\n<li><code class=\"language-text\">Ok</code>: The operation succeeded. If reading something, this gives you the read value.</li>\n<li><code class=\"language-text\">Err</code>: An error occurred while performing this operation.</li>\n</ul>\n<p>This maps very nicely to Rust's <code class=\"language-text\">Future</code> trait, which is used to implement asynchronous code. For\nexample, reading from a serial port is implemented like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">poll_read</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pin</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">Self</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    cx<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">Context</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'_</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    buf<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Poll</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Error</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">first_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> byte<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Poll</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">nb<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">WouldBlock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Poll</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Pending</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">nb<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Other</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Poll</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Poll</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Although there's a bit of weirdness in terms of checking if the buffer is big enough, for the most\npart, this works pretty well.</p>\n<blockquote>\n<h3 id=\"why-do-i-always-return-1-byte-read\"><a href=\"#why-do-i-always-return-1-byte-read\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why do I always return 1 byte read?</h3>\n<p>I'm mostly mirroring the <code class=\"language-text\">AsyncRead</code> and <code class=\"language-text\">AsyncWrite</code> in the <code class=\"language-text\">futures</code> crate, which typically is\nused on machines with full operating systems. Typically, the overhead of a syscall is somewhat\nhigh, so you might request e.g. 1024 bytes at a time. Obviously, that isn't the case for an 8-bit\n<abbr title=\"Microcontroller\">MCU</abbr>. However, I'm keeping that pattern for ease of porting and to allow for networking, e.g. the\nArduino Ethernet shield.</p>\n</blockquote>\n<p>Then, I copied and pasted the <code class=\"language-text\">AsyncReadExt</code> and <code class=\"language-text\">AsyncWriteExt</code> traits from the <code class=\"language-text\">futures</code> crate as\nwell. The way this is set up is that you just implement the low-level functions, and the <code class=\"language-text\">Ext</code>\ntraits take care of the more user-friendly functions. This is done instead of default\nimplementations to allow the main trait to be small in case it is added to the standard library,\nmuch like how <code class=\"language-text\">Future</code> is in <code class=\"language-text\">std</code>/<code class=\"language-text\">core</code>, but many functions require the extension trait\n<code class=\"language-text\">FutureExt</code> from the <code class=\"language-text\">futures</code> crate. The functions that <code class=\"language-text\">AsyncReadExt</code> and the like provide allow\nfor tasks like reading and writing a fixed number of bytes, and <code class=\"language-text\">await</code>ing until that is complete.</p>\n<h2 id=\"writing-an-executor\"><a href=\"#writing-an-executor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Writing an executor</h2>\n<p>Thankfully, there's a few places we can get code from—the Rust embedded team has been working on a\n<a href=\"https://github.com/rust-embedded-community/async-on-embedded/blob/master/async-embedded/src/executor.rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">generic executor</a>, and <a href=\"https://github.com/lights0123/ndless-rs/tree/master/ndless-async\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">I have my own executor</a> that I've\nused for third-party code on TI calculators. I started off with a way to safely share state between\ninterrupts. Typically, this is done with atomic instructions, but AVR does not have those (or\nnecessarily have a need for it, as it is single-core). So, I used <code class=\"language-text\">volatile</code> operations:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token attribute attr-name\">#[repr(transparent)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Volatile</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Copy</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsafeCell</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Copy</span><span class=\"token operator\">></span> <span class=\"token class-name\">Volatile</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Volatile</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Volatile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsafeCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">read_volatile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">write_volatile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<h3 id=\"why-not-the-vcell-crate\"><a href=\"#why-not-the-vcell-crate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why not the <code class=\"language-text\">vcell</code> crate?</h3>\n<p>The above code is functionally identical to the <a href=\"https://docs.rs/vcell/0.1.*/vcell/struct.VolatileCell.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">VolatileCell</code></a> that <a href=\"https://docs.rs/vcell/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">vcell</code></a> provides—in fact,\nI wrote the above code and realized that it is <em>almost identical</em> to that crate. However, I will\nprobably want more control in the future, as the above code is <strong>unsound</strong> if used with a type\nthat is bigger than 1 byte. This is because AVR can write or read one byte in one instruction, so\nif an interrupt occurs, it is either written or not. In the future, I'd like to expand it to\ndisable interrupts when writing more than 1 byte, so state can be safely shared between contexts.</p>\n</blockquote>\n<h3 id=\"creating-a-vtable\"><a href=\"#creating-a-vtable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating a VTable</h3>\n<p>We need to tell Rust how it can wake up a task. So, doing some copy-pasting from\n<a href=\"https://github.com/rust-embedded-community/async-on-embedded/blob/master/async-embedded/src/executor.rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">async-on-embedded</a>:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token comment\">// NOTE `*const ()` is &amp;Volatile&lt;bool></span>\n<span class=\"token keyword\">static</span> <span class=\"token constant\">VTABLE</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">RawWakerVTable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">clone</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">RawWaker</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RawWaker</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token constant\">VTABLE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">wake</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">wake_by_ref</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">wake_by_ref</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">Volatile</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">drop</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// no-op</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">RawWakerVTable</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">,</span> wake<span class=\"token punctuation\">,</span> wake_by_ref<span class=\"token punctuation\">,</span> drop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here, I adapted the code to use my own synchronization code instead of <code class=\"language-text\">AtomicBool</code>, which we don't\nhave access to.</p>\n<h3 id=\"the-block_on-function\"><a href=\"#the-block_on-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The <code class=\"language-text\">block_on</code> function</h3>\n<p>Finally, it's time for the executor:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token comment\">/// Spawns a task and blocks until the future resolves, returning its result.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">block_on</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">:</span> <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Future</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> ready <span class=\"token operator\">=</span> <span class=\"token class-name\">Volatile</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> waker <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Waker</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_raw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RawWaker</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ready <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> _ <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> _<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token constant\">VTABLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_waker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">pin_mut!</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> task <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> ready<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">match</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">as_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Poll</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">Poll</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Pending</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    ready<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This function will accept a <code class=\"language-text\">Future</code>, which is typically automatically generated when writing an\n<code class=\"language-text\">async</code> block in Rust. Then, it will poll it. The task will either say that it's done right away, or\nregister itself to wake up (via the <code class=\"language-text\">waker</code>) when it's ready. Then, it gets polled again, continuing\nthe cycle.</p>\n<p>However, <a href=\"https://gitter.im/avr-rust/Lobby?at=5f1ca63fbc41f3681724bbba\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LLVM has a bug</a> that crashes the <abbr title=\"Microcontroller\">MCU</abbr> when calling a function pointer.\nUnfortunately, that's entirely how <code class=\"language-text\">Waker</code>s are implemented, so let's comment out the part where I\nmark it as not ready:</p>\n<div class=\"gridsome-highlight\" data-language=\"diff\"><pre style=\"counter-reset: linenumber 14\" class=\"language-diff line-numbers\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">    ready.write(false);\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> // ready.write(false);</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>This will just poll the task in a busy loop. This isn't great for power usage, but is easy to\nimplement.</p>\n<h1 id=\"writing-asynchronous-code\"><a href=\"#writing-asynchronous-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Writing asynchronous code!</h1>\n<h2 id=\"a-simple-demo\"><a href=\"#a-simple-demo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A simple demo</h2>\n<p>Now that we have the low-level stuff working, we can get on to writing asynchronous code! Let's\nstart with a <a href=\"https://github.com/lights0123/async-avr/blob/main/examples/single-task.rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">basic, single-task only example</a> just to make sure everything\nworks:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token namespace\">arduino_uno<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Peripherals</span><span class=\"token punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pins <span class=\"token operator\">=</span> <span class=\"token namespace\">arduino_uno<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Pins</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">.</span><span class=\"token constant\">PORTB</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">PORTC</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">PORTD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> serial <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncSerial</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">arduino_uno<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Serial</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n        dp<span class=\"token punctuation\">.</span><span class=\"token constant\">USART0</span><span class=\"token punctuation\">,</span>\n        pins<span class=\"token punctuation\">.</span>d0<span class=\"token punctuation\">,</span>\n        pins<span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">57600</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">block_on</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            serial<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Compile and upload it:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">❱ cargo +nightly build --example single-task --release <span class=\"token operator\">&amp;&amp;</span> avrdude -v -patmega328p -carduino -P/dev/ttyACM0 -b115200 -D -Uflash:w:target/avr-atmega328p/release/examples/single-task.elf:e\n   Compiling async-avr v0.1.0 <span class=\"token punctuation\">(</span>/home/lights0123/IdeaProjects/async-avr<span class=\"token punctuation\">)</span>\n    Finished release <span class=\"token punctuation\">[</span>optimized<span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.28s\n\navrdude: Version <span class=\"token number\">6.3</span>-20190619\n         Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2000</span>-2005 Brian Dean, http://www.bdmicro.com/\n         Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2007</span>-2014 Joerg Wunsch\n\navrdude: AVR device initialized and ready to accept instructions\n\nReading <span class=\"token operator\">|</span> <span class=\"token comment\">################################################## | 100% 0.00s</span>\n\navrdude: Device signature <span class=\"token operator\">=</span> 0x1e950f <span class=\"token punctuation\">(</span>probably m328p<span class=\"token punctuation\">)</span>\navrdude: safemode: lfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: hfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: efuse reads as <span class=\"token number\">0</span>\navrdude: reading input <span class=\"token function\">file</span> <span class=\"token string\">\"target/avr-atmega328p/release/examples/single-task.elf\"</span>\navrdude: writing flash <span class=\"token punctuation\">(</span><span class=\"token number\">380</span> bytes<span class=\"token punctuation\">)</span>:\n\nWriting <span class=\"token operator\">|</span> <span class=\"token comment\">################################################## | 100% 0.06s</span>\n\navrdude: <span class=\"token number\">380</span> bytes of flash written\navrdude: verifying flash memory against target/avr-atmega328p/release/examples/single-task.elf:\navrdude: load data flash data from input <span class=\"token function\">file</span> target/avr-atmega328p/release/examples/single-task.elf:\navrdude: input <span class=\"token function\">file</span> target/avr-atmega328p/release/examples/single-task.elf contains <span class=\"token number\">380</span> bytes\navrdude: reading on-chip flash data:\n\nReading <span class=\"token operator\">|</span> <span class=\"token comment\">################################################## | 100% 0.05s</span>\n\navrdude: verifying <span class=\"token punctuation\">..</span>.\navrdude: <span class=\"token number\">380</span> bytes of flash verified\n\navrdude: safemode: lfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: hfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: efuse reads as <span class=\"token number\">0</span>\navrdude: safemode: Fuses OK <span class=\"token punctuation\">(</span>E:00, H:00, L:00<span class=\"token punctuation\">)</span>\n\navrdude done.  Thank you.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And let's check the serial output:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">❱ pio device monitor -b <span class=\"token number\">57600</span>\n--- Available filters and text transformations: colorize, debug, default, direct, hexlify, log2file, nocontrol, printable, send_on_enter, <span class=\"token function\">time</span>\n--- More details at http://bit.ly/pio-monitor-filters\n--- Miniterm on /dev/ttyACM0  <span class=\"token number\">57600,8</span>,N,1 ---\n--- Quit: Ctrl+C <span class=\"token operator\">|</span> Menu: Ctrl+T <span class=\"token operator\">|</span> Help: Ctrl+T followed by Ctrl+H ---\nHello World<span class=\"token operator\">!</span>\nHello World<span class=\"token operator\">!</span>\nHello World<span class=\"token operator\">!</span>\nHello World<span class=\"token operator\">!</span>\nHello World<span class=\"token operator\">!</span>\nHello World<span class=\"token operator\">!</span>\nHello World<span class=\"token operator\">!</span>\n--- <span class=\"token builtin class-name\">exit</span> ---</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"a-bit-more-powerful\"><a href=\"#a-bit-more-powerful\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A bit more powerful</h2>\n<p>Great—that worked! Now, let's try doing multiple things. Let's do <a href=\"https://github.com/lights0123/async-avr/blob/main/examples/serial.rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">both SPI communication and\nreading UART data now</a>. Starting out with getting our peripherals:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token namespace\">arduino_uno<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Peripherals</span><span class=\"token punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pins <span class=\"token operator\">=</span> <span class=\"token namespace\">arduino_uno<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Pins</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">.</span><span class=\"token constant\">PORTB</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">PORTC</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token constant\">PORTD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> serial <span class=\"token operator\">=</span> <span class=\"token namespace\">arduino_uno<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Serial</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n    dp<span class=\"token punctuation\">.</span><span class=\"token constant\">USART0</span><span class=\"token punctuation\">,</span>\n    pins<span class=\"token punctuation\">.</span>d0<span class=\"token punctuation\">,</span>\n    pins<span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">57600</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npins<span class=\"token punctuation\">.</span>d10<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS must be set to output mode.</span>\n\n<span class=\"token comment\">// Create SPI interface.</span>\n<span class=\"token keyword\">let</span> spi <span class=\"token operator\">=</span> <span class=\"token class-name\">Spi</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n    dp<span class=\"token punctuation\">.</span><span class=\"token constant\">SPI</span><span class=\"token punctuation\">,</span>\n    pins<span class=\"token punctuation\">.</span>d13<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    pins<span class=\"token punctuation\">.</span>d11<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    pins<span class=\"token punctuation\">.</span>d12<span class=\"token punctuation\">.</span><span class=\"token function\">into_pull_up_input</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Settings</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Converting them to async versions:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> spi <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncSpi</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>spi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">,</span> tx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rx <span class=\"token operator\">=</span> <span class=\"token class-name\">AsyncSerial</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tx <span class=\"token operator\">=</span> <span class=\"token class-name\">RefCell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncSerial</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Some basic locking:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> serial_lock <span class=\"token operator\">=</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<blockquote>\n<h3 id=\"why-do-we-need-to-lock\"><a href=\"#why-do-we-need-to-lock\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why do we need to lock?</h3>\n<p>Because we may have multiple tasks trying to write to the same serial port at the same time, we\nneed to add synchronization so that doesn't happen. Ideally, I would use a <code class=\"language-text\">Mutex</code> that handles\nall this for us, but I haven't written one yet (or moreso copied-and-pasted from <a href=\"https://github.com/rust-embedded-community/async-on-embedded/blob/master/async-embedded/src/unsync/mutex.rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one that already\nexists</a>).</p>\n</blockquote>\n<p>Creating a serial loop:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> serial_loop <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        rx<span class=\"token punctuation\">.</span><span class=\"token function\">read_exact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>serial_lock<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                serial_lock<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tx<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"hello!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serial_lock<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Yield</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Note: this will not actually <em>run</em> the loop. That comes later.</p>\n</blockquote>\n<p>Creating an SPI loop:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> spi_loop <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        spi<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        spi<span class=\"token punctuation\">.</span><span class=\"token function\">read_exact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>serial_lock<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                serial_lock<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> tx_ref <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">borrow_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tx_ref<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"wrote \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tx_ref<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tx_ref<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serial_lock<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Yield</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Yield</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<h3 id=\"whats-with-all-the-yielding\"><a href=\"#whats-with-all-the-yielding\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's with all the yielding?</h3>\n<p>As Rust implements <em>cooperative</em> multitasking, we need to explicitly give control back to other\ntasks. Otherwise, we'd be in a loop waiting for the other task to be done writing, without ever\ngiving it a chance to write!</p>\n</blockquote>\n<p>Finally running it:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token function\">block_on</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span> <span class=\"token namespace\">futures_util<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">join!</span><span class=\"token punctuation\">(</span>serial_loop<span class=\"token punctuation\">,</span> spi_loop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Compile and upload it:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">❱ cargo +nightly build --example serial <span class=\"token operator\">&amp;&amp;</span> avrdude -v -patmega328p -carduino -P/dev/ttyACM0 -b115200 -D -Uflash:w:target/avr-atmega328p/release/examples/serial.elf:e\n   Compiling async-avr v0.1.0 <span class=\"token punctuation\">(</span>/home/lights0123/IdeaProjects/async-avr<span class=\"token punctuation\">)</span>\n    Finished release <span class=\"token punctuation\">[</span>optimized<span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.28s\n\navrdude: Version <span class=\"token number\">6.3</span>-20190619\n         Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2000</span>-2005 Brian Dean, http://www.bdmicro.com/\n         Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2007</span>-2014 Joerg Wunsch\n\navrdude: AVR device initialized and ready to accept instructions\n\nReading <span class=\"token operator\">|</span> <span class=\"token comment\">################################################## | 100% 0.00s</span>\n\navrdude: Device signature <span class=\"token operator\">=</span> 0x1e950f <span class=\"token punctuation\">(</span>probably m328p<span class=\"token punctuation\">)</span>\navrdude: safemode: lfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: hfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: efuse reads as <span class=\"token number\">0</span>\navrdude: reading input <span class=\"token function\">file</span> <span class=\"token string\">\"target/avr-atmega328p/release/examples/serial.elf\"</span>\navrdude: writing flash <span class=\"token punctuation\">(</span><span class=\"token number\">2562</span> bytes<span class=\"token punctuation\">)</span>:\n\nWriting <span class=\"token operator\">|</span> <span class=\"token comment\">################################################## | 100% 0.43s</span>\n\navrdude: <span class=\"token number\">2562</span> bytes of flash written\navrdude: verifying flash memory against target/avr-atmega328p/release/examples/serial.elf:\navrdude: load data flash data from input <span class=\"token function\">file</span> target/avr-atmega328p/release/examples/serial.elf:\navrdude: input <span class=\"token function\">file</span> target/avr-atmega328p/release/examples/serial.elf contains <span class=\"token number\">2562</span> bytes\navrdude: reading on-chip flash data:\n\nReading <span class=\"token operator\">|</span> <span class=\"token comment\">################################################## | 100% 0.34s</span>\n\navrdude: verifying <span class=\"token punctuation\">..</span>.\navrdude: <span class=\"token number\">2562</span> bytes of flash verified\n\navrdude: safemode: lfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: hfuse reads as <span class=\"token number\">0</span>\navrdude: safemode: efuse reads as <span class=\"token number\">0</span>\navrdude: safemode: Fuses OK <span class=\"token punctuation\">(</span>E:00, H:00, L:00<span class=\"token punctuation\">)</span>\n\navrdude done.  Thank you.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And let's check the serial output:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">❱ pio device monitor -b <span class=\"token number\">57600</span>\n--- Available filters and text transformations: colorize, debug, default, direct, hexlify, log2file, nocontrol, printable, send_on_enter, <span class=\"token function\">time</span>\n--- More details at http://bit.ly/pio-monitor-filters\n--- Miniterm on /dev/ttyACM0  <span class=\"token number\">57600,8</span>,N,1 ---\n--- Quit: Ctrl+C <span class=\"token operator\">|</span> Menu: Ctrl+T <span class=\"token operator\">|</span> Help: Ctrl+T followed by Ctrl+H ---\nwrote a<span class=\"token operator\">!</span>\nwrote a<span class=\"token operator\">!</span>\nwrote a<span class=\"token operator\">!</span>\nwrote a<span class=\"token operator\">!</span>\nhello<span class=\"token operator\">!</span>\nwrote a<span class=\"token operator\">!</span>\nwrote a<span class=\"token operator\">!</span>\nwrote a<span class=\"token operator\">!</span>\n--- <span class=\"token builtin class-name\">exit</span> ---</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here, I pressed a key on my keyboard to send a character, which resulted in the reply of \"hello!\".\nThis successfully demonstrates multiple tasks running at the same time.</p>\n<h1 id=\"to-do\"><a href=\"#to-do\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>To Do</h1>\n<p>Right now, this is far from being done and usable. I only have basic for two peripherals: UART and\nSPI. More work is required for timers, but once that is done, using <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> on an Arduino\nwill be <em>very</em> nice—scheduling a periodic task would be as easy as surrounding it in a <code class=\"language-text\">timeout</code>\nfunction, and waiting for e.g. serial data would not block anything else. Additionally, getting\ninterrupts to work will allow the <abbr title=\"Microcontroller\">MCU</abbr> to go to sleep while waiting for something to occur, saving\npower.</p>\n<p>Currently, effort on this is blocked on <a href=\"https://gitter.im/avr-rust/Lobby?at=5f1ca63fbc41f3681724bbba\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">an LLVM issue that prevents calling function\npointers</a>. Until that is fixed, busy-loop polling is the best we can do.</p>\n<p>However, <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> could definitely change the way Arduino code is written. It doesn't have to\nbe in Rust (although I would definitely not complain :) ), but this style could allow for easier to\nwrite <em>and</em> more power efficient projects.</p>\n<h1 id=\"final-code\"><a href=\"#final-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Final code</h1>\n<p><a href=\"https://github.com/lights0123/async-avr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lights0123/async-avr</a></p>\n<h1 id=\"thanks-to\"><a href=\"#thanks-to\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thanks to</h1>\n<p>These are a few resources that have been helpful.</p>\n<p><a href=\"https://github.com/Rahix/avr-hal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Rahix/avr-hal</a><br>\n<a href=\"https://github.com/avr-rust/ruduino/issues/9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/avr-rust/ruduino/issues/9</a><br>\n<a href=\"https://github.com/shepmaster/rust-arduino-blink-led-no-core-with-cargo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/shepmaster/rust-arduino-blink-led-no-core-with-cargo</a><br>\n<a href=\"https://github.com/nh2/quadcopter-simulation/blob/8a3652b8a704877156e91c0691ce8ce37588eb53/arduino-accel-rust/src/main.rs#L300-L327\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/nh2/quadcopter-simulation/blob/8a3652b8a704877156e91c0691ce8ce37588eb53/arduino-accel-rust/src/main.rs#L300-L327</a></p>\n","date":"Jul 25 2020","path":"/blog/2020/07/25/async-await-for-avr-with-rust/"}}]}},"context":{}}